"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3051],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9383:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={id:"lsp",title:"Liskov substitution principle",sidebar_label:"Liskov Substitution Principle"},l=void 0,p={unversionedId:"readings/wk2/lsp",id:"readings/wk2/lsp",isDocsHomePage:!1,title:"Liskov substitution principle",description:"When extending a class, consider that you should be able to pass objects of the subclass in place of objects of the parent class without breaking the client code.",source:"@site/docs/readings/wk2/lsp.md",sourceDirName:"readings/wk2",slug:"/readings/wk2/lsp",permalink:"/cs421_f21/docs/readings/wk2/lsp",editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk2/lsp.md",version:"current",frontMatter:{id:"lsp",title:"Liskov substitution principle",sidebar_label:"Liskov Substitution Principle"},sidebar:"tutorialSidebar",previous:{title:"Open-Closed Principle",permalink:"/cs421_f21/docs/readings/wk2/ocp"},next:{title:"Interface Segregation Principle",permalink:"/cs421_f21/docs/readings/wk2/isp"}},c=[],d={toc:c};function m(e){var t=e.components,s=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Principle")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"When extending a class, consider that you should be able to pass objects of the subclass in place of objects of the parent class without breaking the client code."))),(0,r.kt)("p",null,"I've stated this principle informally; if you look it up on ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Liskov_substitution_principle"},"Wikipedia")," for instance, you will find formal descriptions such as"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Let ",(0,r.kt)("inlineCode",{parentName:"p"},"\u03d5(x)")," be a property provable about objects ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),". Then ",(0,r.kt)("inlineCode",{parentName:"p"},"\u03d5(y)")," should be true for objects ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," of type ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," is a sub-type of ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),"."))),(0,r.kt)("p",null,"All this, is a fancy way of saying that every subclass/derived class should be substitutable for their base/parent class. In other words, a subclass ",(0,r.kt)("strong",{parentName:"p"},"should not break the expectations")," (",(0,r.kt)("em",{parentName:"p"},"code contracts"),") set by its super-class.",(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,r.kt)("p",null,"Let's see an example to better understand the Liskov Substitution Principle (LSP). Consider the following implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"Rectangle")," class. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Rectangle {\n    private int width;\n    private int height;\n\n    public void setWidth(int width) {  this.width = width; }\n    public void setHeight(int height) {  this.height = height; }\n    public int getArea() { return width*height; }\n}\n")),(0,r.kt)("p",null,"Since a square is a rectangle (mathematically speaking), we decide to implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Square")," as a subclass of ",(0,r.kt)("inlineCode",{parentName:"p"},"Rectangle"),". We override ",(0,r.kt)("inlineCode",{parentName:"p"},"setWidth")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setHeight")," and we can reuse the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"getArea"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Square extends Rectangle {\n\n    @Override\n    public void setWidth(int width) {  \n        super.setWidth(width); \n        super.setHeight(width);\n    }\n\n    @Override\n    public void setHeight(int height) {  \n        super.setWidth(height); \n        super.setHeight(height);\n    }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"With this overriding of ",(0,r.kt)("inlineCode",{parentName:"p"},"setWidth")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setHeight")," -- to set both dimensions to the same value -- instances of ",(0,r.kt)("inlineCode",{parentName:"p"},"Square")," remain mathematically valid squares. "))),(0,r.kt)("p",null,"The bad news is that making ",(0,r.kt)("inlineCode",{parentName:"p"},"Square")," a subtype of ",(0,r.kt)("inlineCode",{parentName:"p"},"Rectangle")," violates the Liskov Substitution Principle. Here is why:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"void clientMethod(Rectangle rect) {\n    rect.setWidth(5);\n    rect.setHeight(4);\n    assert rect.getArea() == 20;\n}\n")),(0,r.kt)("p",null,"LSP is violated because if we pass an object of ",(0,r.kt)("inlineCode",{parentName:"p"},"Square")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"clientMethod")," (which we can since ",(0,r.kt)("inlineCode",{parentName:"p"},"Square")," is a subtype of ",(0,r.kt)("inlineCode",{parentName:"p"},"Rectangle"),") the assertion in ",(0,r.kt)("inlineCode",{parentName:"p"},"clientMethod")," will fail. In other words, the expected behavior of super type is not maintained."),(0,r.kt)("p",null,"So what is the solution? Well, you can simply make two separate classes: ",(0,r.kt)("inlineCode",{parentName:"p"},"Rectangle")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Square"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(5546).Z})),(0,r.kt)("p",null,"You could use ",(0,r.kt)("em",{parentName:"p"},"composition")," to ",(0,r.kt)("em",{parentName:"p"},"reuse")," the code in ",(0,r.kt)("inlineCode",{parentName:"p"},"Rectangle"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Square {\n    private Rectangle rectangle;\n\n    public void setSideLength(int side) {\n        rectangle.setHeight(side);\n        rectangle.setWidth(side);\n    }\n\n    public int getArea() { return rectangle.getArea(); } \n}\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Case in point")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"LSP is all about well-designed inheritance. If you cannot substitute your baseclass with a subclass without things going wrong, then it means you used inheritance incorrectly. "),(0,r.kt)("li",{parentName:"ul"},"Inheritance seems like a cool idea; you get to ",(0,r.kt)("em",{parentName:"li"},"create a hierarchy of types")," and ",(0,r.kt)("em",{parentName:"li"},"reuse your code"),". But, it\u2019s easy to abuse inheritance. So, don't overdo it; especially consider ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Composition_over_inheritance"},"composition over inheritance"),"!")))),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},'A closely related principle in software development is called "',(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Design_by_contract"},"Design by contract"),'". ',(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0},5546:function(e,t,n){t.Z=n.p+"assets/images/lsp01-a8e306ce976b5ad049fe9fc1fe4a6587.png"}}]);