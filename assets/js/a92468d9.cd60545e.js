"use strict";(self.webpackChunkcs_421_source=self.webpackChunkcs_421_source||[]).push([[3051],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={id:"lsp",title:"Liskov substitution principle",sidebar_label:"Liskov Substitution Principle"},o=void 0,s={unversionedId:"readings/wk2/lsp",id:"readings/wk2/lsp",title:"Liskov substitution principle",description:"When extending a class, consider that you should be able to pass objects of the subclass in place of objects of the parent class without breaking the client code.",source:"@site/docs/readings/wk2/lsp.md",sourceDirName:"readings/wk2",slug:"/readings/wk2/lsp",permalink:"/cs421/docs/readings/wk2/lsp",draft:!1,editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk2/lsp.md",tags:[],version:"current",frontMatter:{id:"lsp",title:"Liskov substitution principle",sidebar_label:"Liskov Substitution Principle"},sidebar:"tutorialSidebar",previous:{title:"Interface Segregation Principle",permalink:"/cs421/docs/readings/wk2/isp"},next:{title:"Get Started with OOAD of your Project",permalink:"/cs421/docs/readings/wk2/model"}},l={},p=[],c={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Principle",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"When extending a class, consider that you should be able to pass objects of the subclass in place of objects of the parent class without breaking the client code.")),(0,a.kt)("p",null,"I've stated this principle informally; if you look it up on ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Liskov_substitution_principle"},"Wikipedia")," for instance, you will find formal descriptions such as"),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Let ",(0,a.kt)("inlineCode",{parentName:"p"},"\u03d5(x)")," be a property provable about objects ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," of type ",(0,a.kt)("inlineCode",{parentName:"p"},"T"),". Then ",(0,a.kt)("inlineCode",{parentName:"p"},"\u03d5(y)")," should be true for objects ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," of type ",(0,a.kt)("inlineCode",{parentName:"p"},"S")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"S")," is a sub-type of ",(0,a.kt)("inlineCode",{parentName:"p"},"T"),".")),(0,a.kt)("p",null,"All this, is a fancy way of saying that every subclass/derived class should be substitutable for their base/parent class. In other words, a subclass ",(0,a.kt)("strong",{parentName:"p"},"should not break the expectations")," (",(0,a.kt)("em",{parentName:"p"},"code contracts"),") set by its super-class.",(0,a.kt)("sup",{parentName:"p",id:"fnref-1"},(0,a.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,a.kt)("p",null,"Let's see an example to better understand the Liskov Substitution Principle (LSP). Consider the following implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle")," class. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class Rectangle {\n    private int width;\n    private int height;\n\n    public void setWidth(int width) {  this.width = width; }\n    public void setHeight(int height) {  this.height = height; }\n    public int getArea() { return width*height; }\n}\n")),(0,a.kt)("p",null,"Since a square is a rectangle (mathematically speaking), we decide to implement ",(0,a.kt)("inlineCode",{parentName:"p"},"Square")," as a subclass of ",(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle"),". We override ",(0,a.kt)("inlineCode",{parentName:"p"},"setWidth")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"setHeight")," and we can reuse the implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"getArea"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class Square extends Rectangle {\n\n    @Override\n    public void setWidth(int width) {  \n        super.setWidth(width); \n        super.setHeight(width);\n    }\n\n    @Override\n    public void setHeight(int height) {  \n        super.setWidth(height); \n        super.setHeight(height);\n    }\n}\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"With this overriding of ",(0,a.kt)("inlineCode",{parentName:"p"},"setWidth")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"setHeight")," -- to set both dimensions to the same value -- instances of ",(0,a.kt)("inlineCode",{parentName:"p"},"Square")," remain mathematically valid squares. ")),(0,a.kt)("p",null,"The bad news is that making ",(0,a.kt)("inlineCode",{parentName:"p"},"Square")," a subtype of ",(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle")," violates the Liskov Substitution Principle. Here is why:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"void clientMethod(Rectangle rect) {\n    rect.setWidth(5);\n    rect.setHeight(4);\n    assert rect.getArea() == 20;\n}\n")),(0,a.kt)("p",null,"LSP is violated because if we pass an object of ",(0,a.kt)("inlineCode",{parentName:"p"},"Square")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"clientMethod")," (which we can since ",(0,a.kt)("inlineCode",{parentName:"p"},"Square")," is a subtype of ",(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle"),") the assertion in ",(0,a.kt)("inlineCode",{parentName:"p"},"clientMethod")," will fail. In other words, the expected behavior of super type is not maintained."),(0,a.kt)("p",null,"So what is the solution? Well, you can simply make two separate classes: ",(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Square"),"."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(6503).Z,width:"477",height:"352"})),(0,a.kt)("p",null,"You could use ",(0,a.kt)("em",{parentName:"p"},"composition")," to ",(0,a.kt)("em",{parentName:"p"},"reuse")," the code in ",(0,a.kt)("inlineCode",{parentName:"p"},"Rectangle"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"public class Square {\n    private Rectangle rectangle;\n\n    public void setSideLength(int side) {\n        rectangle.setHeight(side);\n        rectangle.setWidth(side);\n    }\n\n    public int getArea() { return rectangle.getArea(); } \n}\n")),(0,a.kt)("admonition",{title:"Case in point",type:"tip"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"LSP is all about well-designed inheritance. If you cannot substitute your baseclass with a subclass without things going wrong, then it means you used inheritance incorrectly. "),(0,a.kt)("li",{parentName:"ul"},"Inheritance seems like a cool idea; you get to ",(0,a.kt)("em",{parentName:"li"},"create a hierarchy of types")," and ",(0,a.kt)("em",{parentName:"li"},"reuse your code"),". But, it\u2019s easy to abuse inheritance. So, don't overdo it; especially consider ",(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Composition_over_inheritance"},"composition over inheritance"),"!"))),(0,a.kt)("div",{className:"footnotes"},(0,a.kt)("hr",{parentName:"div"}),(0,a.kt)("ol",{parentName:"div"},(0,a.kt)("li",{parentName:"ol",id:"fn-1"},'A closely related principle in software development is called "',(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Design_by_contract"},"Design by contract"),'". ',(0,a.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0},6503:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/lsp01-a8e306ce976b5ad049fe9fc1fe4a6587.png"}}]);