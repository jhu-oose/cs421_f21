"use strict";(self.webpackChunkcs_421_source=self.webpackChunkcs_421_source||[]).push([[421],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,g=c["".concat(l,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(g,s(s({ref:t},d),{},{components:n})):a.createElement(g,s({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9322:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={id:"db",title:"Database in the cloud",sidebar_label:"Database in the Cloud"},s=void 0,i={unversionedId:"readings/wk7/db",id:"readings/wk7/db",title:"Database in the cloud",description:"Heroku does not play well with SQLite",source:"@site/docs/readings/wk7/db.md",sourceDirName:"readings/wk7",slug:"/readings/wk7/db",permalink:"/cs421/docs/readings/wk7/db",draft:!1,editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk7/db.md",tags:[],version:"current",frontMatter:{id:"db",title:"Database in the cloud",sidebar_label:"Database in the Cloud"},sidebar:"tutorialSidebar",previous:{title:"Continuous Integration with Github Actions",permalink:"/cs421/docs/readings/wk7/ci"}},l={},p=[{value:"Heroku does not play well with SQLite",id:"heroku-does-not-play-well-with-sqlite",level:2},{value:"PostgreSQL database",id:"postgresql-database",level:2},{value:"PostgreSQL Add-on",id:"postgresql-add-on",level:2},{value:"Deploy",id:"deploy",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"heroku-does-not-play-well-with-sqlite"},"Heroku does not play well with SQLite"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"SQLite is serverless, runs in memory, and backs up its data in small files on disk that are easily created and moved around. While easy to use, SQLite is not intended as a ",(0,o.kt)("em",{parentName:"p"},"production grade")," database. In particular, SQLite will not play well with Heroku because Heroku uses ",(0,o.kt)("em",{parentName:"p"},"an ephemeral filesystem"),"; you can write to it, and you can read from it, but the contents will be cleared periodically. If you were to use SQLite on Heroku, you would lose your entire database at least once every 24 hours!")),(0,o.kt)("h2",{id:"postgresql-database"},"PostgreSQL database"),(0,o.kt)("p",null,"Heroku provides production grade ",(0,o.kt)("a",{parentName:"p",href:"https://www.heroku.com/postgres"},"PostgreSQL")," databases as a service. PostgreSQL database can be used by any language and framework, and it is very easy to connect your Java App to it;\nyou'll need to change your JDBC driver but probably not much else."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Even though SQL is the standard language to use with SQL-based relational databases such as SQLite, PostgreSQL, MySQL etc., each of these DBMSs may have its own ",(0,o.kt)("em",{parentName:"p"},"dialect")," of SQL. This at times may affect how you would need to write/set up your SQL queries. ")),(0,o.kt)("p",null,"First, add the JDBC driver for PostgreSQL to your project dependencies: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},"implementation 'org.postgresql:postgresql:42.2.17'\n")),(0,o.kt)("p",null,"Also, add ",(0,o.kt)("inlineCode",{parentName:"p"},"SQLite")," as follows (in case the app is run locally):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},"implementation 'org.xerial:sqlite-jdbc:3.32.3.2'\n")),(0,o.kt)("p",null,"Let's write a sample code to demonstrate the process of connecting to Heroku Postgres. Here is the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," method from last reading; I added a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"workWithDatabase()")," at the end:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public static void main(String[] args) {\n    port(getHerokuAssignedPort());\n    get("/", (req, res) -> "Hi Heroku!");\n    workWithDatabase();\n}\n')),(0,o.kt)("p",null,"Here is the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"workWithDatabase()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'private static void workWithDatabase(){\n    try (Connection conn = getConnection()) {\n        String sql = "";\n\n        if ("SQLite".equalsIgnoreCase(conn.getMetaData().getDatabaseProductName())) { // running locally\n            sql = "CREATE TABLE IF NOT EXISTS employers (id INTEGER PRIMARY KEY, " +\n                    "name VARCHAR(100) NOT NULL UNIQUE, sector VARCHAR(100), summary VARCHAR(10000));";\n        }\n        else {\n            sql = "CREATE TABLE IF NOT EXISTS employers (id serial PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE," +\n                    " sector VARCHAR(100), summary VARCHAR(10000));";\n        }\n\n        Statement st = conn.createStatement();\n        st.execute(sql);\n\n        sql = "INSERT INTO employers(name, sector, summary) VALUES (\'Boeing\', \'Aerospace\', \'\');";\n        st.execute(sql);\n\n    } catch (URISyntaxException | SQLException e) {\n        e.printStackTrace();\n    }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"workWithDatabase")," is a very simple example of using JDBC to (1) establish a ",(0,o.kt)("em",{parentName:"p"},"Connection")," to a SQL database and (2) execute two SQL statements to create a table and insert a record into it. "),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"In the above code, note how we first decide which DBMS we are working with (SQLite or PostgreSQL) to set up our table creation accordingly; ",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/9.1/datatype-numeric.html"},(0,o.kt)("inlineCode",{parentName:"a"},"serial"))," is Postgres way of creating an ",(0,o.kt)("em",{parentName:"p"},"autoincrement")," integer column.")),(0,o.kt)("p",null,"Note the use of ",(0,o.kt)("inlineCode",{parentName:"p"},"getConnection()")," method; here is the implementation for it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'private static Connection getConnection() throws URISyntaxException, SQLException {\n    String databaseUrl = System.getenv("DATABASE_URL");\n    if (databaseUrl == null) {\n        // Not on Heroku, so use SQLite\n        return DriverManager.getConnection("jdbc:sqlite:./JBApp.db");\n    }\n\n    URI dbUri = new URI(databaseUrl);\n\n    String username = dbUri.getUserInfo().split(":")[0];\n    String password = dbUri.getUserInfo().split(":")[1];\n    String dbUrl = "jdbc:postgresql://" + dbUri.getHost() + \':\'\n            + dbUri.getPort() + dbUri.getPath() + "?sslmode=require";\n\n    return DriverManager.getConnection(dbUrl, username, password);\n}\n')),(0,o.kt)("p",null,"When we were working with SQLite, we used a URI like ",(0,o.kt)("inlineCode",{parentName:"p"},"jdbc:sqlite:./JBApp.db")," to instantiate a JDBC connection in your code. Heroku puts the URI of the PostgreSQL database in a ",(0,o.kt)("em",{parentName:"p"},"environment variable")," ",(0,o.kt)("inlineCode",{parentName:"p"},"DATABASE_URL"),". We can directly get the ",(0,o.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," in code.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," for the Heroku Postgres follows the below convention:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plain"},"postgres://<username>:<password>@<host>:<port>/<dbname>\n")),(0,o.kt)("p",null,"However, the Postgres JDBC driver uses the following convention:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plain"},"jdbc:postgresql://<host>:<port>/<dbname>?user=<username>&password=<password>\n")),(0,o.kt)("p",null,"The code in ",(0,o.kt)("inlineCode",{parentName:"p"},"getConnection()")," converts the Heroku ",(0,o.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," into a JDBC URI."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The example above uses SQLite when you are not on Heroku and PostgreSQL database when you are on Heroku. This is only for demonstration purposes. ",(0,o.kt)("strong",{parentName:"p"},"It is important that you use the same database in production as in development.")," So, if you are going to deploy your app on Heroku, you will need to install the PostgreSQL database locally. You can download and learn about Postgres ",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/download/"},"here"),".")),(0,o.kt)("h2",{id:"postgresql-add-on"},"PostgreSQL Add-on"),(0,o.kt)("p",null,"Before you deploy your app to Heroku, you need to create the Heroku Postgres add-on for your app using the Heroku CLI; open the terminal at the root directory of your Java project and type the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ heroku addons:create heroku-postgresql\n")),(0,o.kt)("h2",{id:"deploy"},"Deploy"),(0,o.kt)("p",null,"Finally, run the following command to deploy your app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ ./gradlew build deployHeroku\n")),(0,o.kt)("p",null,"To checkout the Postgres database provisioned for your app (and its content) you can use Heroku CLI. Learn more on this ",(0,o.kt)("a",{parentName:"p",href:"https://devcenter.heroku.com/articles/heroku-postgresql#using-the-cli"},"here"),". Alternatively, install PostgreSQL locally and connect it to Heroku Postgres following the instructions ",(0,o.kt)("a",{parentName:"p",href:"https://devcenter.heroku.com/articles/heroku-postgresql#local-setup"},"here"),". Finally, if you only want to have a GUI-based front-end to your Heroku's database, I would suggest ",(0,o.kt)("a",{parentName:"p",href:"http://sosedoff.github.io/pgweb/"},"pgweb"),"."))}u.isMDXComponent=!0}}]);