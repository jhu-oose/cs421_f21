"use strict";(self.webpackChunkcs_421_source=self.webpackChunkcs_421_source||[]).push([[9456],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,y=d["".concat(i,".").concat(u)]||d[u]||c[u]||o;return t?a.createElement(y,s(s({ref:n},m),{},{components:t})):a.createElement(y,s({ref:n},m))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2030:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={id:"lambda",title:"Lambda expressions",sidebar_label:"Lambda Expressions"},s=void 0,l={unversionedId:"readings/wk4/lambda",id:"readings/wk4/lambda",title:"Lambda expressions",description:"Setting the scene: anonymous classes!",source:"@site/docs/readings/wk4/lambda.md",sourceDirName:"readings/wk4",slug:"/readings/wk4/lambda",permalink:"/cs421/docs/readings/wk4/lambda",draft:!1,editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk4/lambda.md",tags:[],version:"current",frontMatter:{id:"lambda",title:"Lambda expressions",sidebar_label:"Lambda Expressions"},sidebar:"tutorialSidebar",previous:{title:"Connecting `Job` and `Employer` Classes",permalink:"/cs421/docs/readings/wk4/jobs_employer_connect"},next:{title:"Object Relational Mapping",permalink:"/cs421/docs/readings/wk4/orm"}},i={},p=[{value:"Setting the scene: anonymous classes!",id:"setting-the-scene-anonymous-classes",level:2},{value:"Lambda expression",id:"lambda-expression",level:2}],m={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"setting-the-scene-anonymous-classes"},"Setting the scene: anonymous classes!"),(0,r.kt)("p",null,"Lambdas are anonymous functions. They were added to Java since Java 8 was released. Lambdas can be used in any place a Single Abstract Method was used before."),(0,r.kt)("p",null,"Let's showcase the use of Lambdas through a demo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@SuppressWarnings("All")\npublic class LambdaDemo {\n\n  public static void main(String[] args) {\n\n  }\n\n  private static List<Employer> getSampleEmployers() {\n    List<Employer> employers = new ArrayList<>();\n    employers.add(new Employer("Boeing", "Aerospace", "The world\'s largest aerospace company!"));\n    employers.add(new Employer("Netflix", "Tech", "One of the world\'s leading entertainment services!"));\n    employers.add(new Employer("Target Inc.", "Retail", "A general merchandise retailer!"));\n    return employers;\n  }\n}\n')),(0,r.kt)("p",null,"We start with using anonymous inline classes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"private static void usingAnonymousInlineClass() {\n    List<Employer> emplyers = getSampleEmployers();\n    Collections.sort(employers, new Comparator<Employer>() {\n        @Override\n        public int compare(Employer e1, Employer e2) {\n            return e1.getName().compareTo(e2.getName());\n        }\n    });\n\n    for (Employer e: employers) {\n        System.out.println(e);\n    }\n}\n\n")),(0,r.kt)("p",null,"Call ",(0,r.kt)("inlineCode",{parentName:"p"},"usingAnonymousInlineClass")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," and it must print out the sample employers sorted by name."),(0,r.kt)("h2",{id:"lambda-expression"},"Lambda expression"),(0,r.kt)("p",null,"An interface that only has one unimplemented abstract method is called ",(0,r.kt)("em",{parentName:"p"},"functional interface")," in Java. In the example we saw above, ",(0,r.kt)("inlineCode",{parentName:"p"},"Comparator")," is a functional interface as it only has one unimplemented asbstract method named ",(0,r.kt)("inlineCode",{parentName:"p"},"compare")," that any ",(0,r.kt)("em",{parentName:"p"},"implementing class")," must implement. We can use lambda expressions since Java 8 to implement a functional interface. In other words, we can just directly provide an implementation for the abstract method wherever a functional interface is expected. Alright, let's do the same thing we did above this time with a lambda function!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"private static void usingLambdaInLongForm() {\n    List<Employer> employers = getSampleEmployers();\n    Collections.sort(employers, (Employer e1, Employer e2) -> {\n        return e1.getName().compareTo(e2.getName());\n    });\n\n    for (Employer e: employers) {\n        System.out.println(e);\n    }\n}\n")),(0,r.kt)("p",null,"The following is ",(0,r.kt)("strong",{parentName:"p"},"syntax sugar")," for anonymous inline implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"Comparator"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"(Employer e1, Employer e2) -> {\n    return e1.getName().compareTo(e2.getName());\n}\n")),(0,r.kt)("p",null,"You've used syntax sugar before: the ",(0,r.kt)("em",{parentName:"p"},"enhanced for loop")," is syntax sugar for looping through the use of an iterator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Iterator<Employer> it  = employers.iterator();\nwhile (it.hasNext()) {\n    Employer e = it.next();\n    System.out.println(e);\n}\n")),(0,r.kt)("p",null,"Bak to Lambdas, let's simplify our lambda expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"private static void usingLambdaInShortForm() {\n    List<Employer> employers = getSampleEmployers();\n    Collections.sort(employers, (e1, e2) -> e1.getName().compareTo(e2.getName()));\n\n    employers.forEach(employer -> System.out.println(employer));\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"You don't need to specify the data type of arguments."),(0,r.kt)("li",{parentName:"ul"},"When the body of your lambda function is a single statement, you can eliminate the ",(0,r.kt)("inlineCode",{parentName:"li"},"{")," ",(0,r.kt)("inlineCode",{parentName:"li"},"}")," and the ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," keyword."))),(0,r.kt)("p",null,"Also note the use of ",(0,r.kt)("inlineCode",{parentName:"p"},"forEach")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"employers.forEach(employer -> System.out.println(employer));\n")),(0,r.kt)("admonition",{title:"References",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"},"Lambda Expression")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html"},"Functional Interface")))))}c.isMDXComponent=!0}}]);