"use strict";(self.webpackChunkcs_421_source=self.webpackChunkcs_421_source||[]).push([[4441],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8997:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const o={id:"iterator",title:"Iterator",sidebar_label:"Iterator"},i=void 0,s={unversionedId:"readings/wk3/iterator",id:"readings/wk3/iterator",title:"Iterator",description:"Iterator is a behavioral design pattern that lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.).",source:"@site/docs/readings/wk3/iterator.md",sourceDirName:"readings/wk3",slug:"/readings/wk3/iterator",permalink:"/cs421/docs/readings/wk3/iterator",draft:!1,editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk3/iterator.md",tags:[],version:"current",frontMatter:{id:"iterator",title:"Iterator",sidebar_label:"Iterator"},sidebar:"tutorialSidebar",previous:{title:"Factory",permalink:"/cs421/docs/readings/wk3/factory"},next:{title:"Observer",permalink:"/cs421/docs/readings/wk3/observer"}},l={},p=[],c={toc:p};function d(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("admonition",{title:"Iterator",type:"info"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("strong",{parentName:"p"},"Iterator")," is a ",(0,n.kt)("em",{parentName:"p"},"behavioral")," design pattern that lets you traverse elements of a collection without exposing its underlying representation (list, stack, tree, etc.).")),(0,n.kt)("p",null,"Iterator pattern is widely used in Java Collection Framework where ",(0,n.kt)("inlineCode",{parentName:"p"},"Iterator")," interface provides methods for traversing through a collection.",(0,n.kt)("sup",{parentName:"p",id:"fnref-1"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,n.kt)("p",null,"For example, consider the following code snippet:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:'hl_lines="7,8,9"',hl_lines:'"7,8,9"'},'TreeSet<String> set = new TreeSet<String>();\nset.add("one");\nset.add("two");\nset.add("three");\n// automatically sorts natural order when adding\n\nfor (String s : set) {\n    System.out.println(s);\n}\n// Prints out "one", "three", "two"\n')),(0,n.kt)("p",null,"The enhanced for loop is a ",(0,n.kt)("em",{parentName:"p"},"syntax sugar")," for:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"Iterator<String> it = set.iterator();\nwhile (it.hasNext()) {\n  String s = it.next();\n  System.out.println(s);\n}\n")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"TreeSet.iterator()")," returns an iterator over the elements in ascending order. Iterator pattern is not only about traversing through a collection, but we can also provide different kind of iterators based on our requirements. For instance, if you were interested in getting the ",(0,n.kt)("inlineCode",{parentName:"p"},"TreeSet")," elements in descending order, you could use ",(0,n.kt)("inlineCode",{parentName:"p"},"TreeSet.descendingIterator()")," method. "),(0,n.kt)("p",null,"In Java, the iterator pattern is applied through implementation of the ",(0,n.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html"},(0,n.kt)("inlineCode",{parentName:"a"},"Iterable"))," and ",(0,n.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html"},(0,n.kt)("inlineCode",{parentName:"a"},"Iterator"))," interfaces; below is a simplified UML diagram that shows the application of this pattern to ",(0,n.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/8/docs/api/java/util/TreeSet.html"},(0,n.kt)("inlineCode",{parentName:"a"},"TreeSet"))," class:"),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(2927).Z,width:"894",height:"578"})),(0,n.kt)("p",null,"Typically, the iterator algorithm is implemented in a separate class.",(0,n.kt)("sup",{parentName:"p",id:"fnref-2"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))," This separation is following the Single Responsibility principle."),(0,n.kt)("p",null,"The use of ",(0,n.kt)("inlineCode",{parentName:"p"},"Iterable")," (as a separate interface with just one method) is in line with the Interface Segregation Principle. Moreover, the use of ",(0,n.kt)("inlineCode",{parentName:"p"},"Iterator")," interface is in accordance to the Open/Closed principle; you can implement new types of iterators and pass them to existing code without breaking anything. "),(0,n.kt)("admonition",{title:"When to use this pattern?",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Use the Iterator pattern when your collection has a complex data structure under the hood, but you want to hide its complexity from clients  (either for convenience or security reasons).")),(0,n.kt)("admonition",{title:"Advantage",type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"Iterator pattern hides the actual implementation of traversal through the collection and client programs just use iterator methods.")),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1"},"If you've taken EN.601.226 Data Structures, you have applied this pattern to (almost) every data structure you have implemented.",(0,n.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2"},"The separate iterator class is often placed as an ",(0,n.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"},"inner class")," inside the data structure class itself.",(0,n.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0},2927:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/iterator01-dd5202f2f5d2738c9f31c43704357fe7.png"}}]);