"use strict";(self.webpackChunkcs_421_source=self.webpackChunkcs_421_source||[]).push([[560],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||o;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={id:"hw2",title:"Homework 2"},r=void 0,l={unversionedId:"hw/hw2",id:"hw/hw2",title:"Homework 2",description:"* You are expected to work individually.",source:"@site/docs/hw/hw2.md",sourceDirName:"hw",slug:"/hw/hw2",permalink:"/cs421/docs/hw/hw2",draft:!1,editUrl:"https://jhu-oose.github.io/cs421_f21/docs/hw/hw2.md",tags:[],version:"current",frontMatter:{id:"hw2",title:"Homework 2"},sidebar:"tutorialSidebar",previous:{title:"Homework 1",permalink:"/cs421/docs/hw/hw1"},next:{title:"Homework 3",permalink:"/cs421/docs/hw/hw3"}},s={},p=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Task 1 - Software Design and UML",id:"task-1---software-design-and-uml",level:2},{value:"Task 2 - Design Principles",id:"task-2---design-principles",level:2},{value:"Task 3 - Design Principles",id:"task-3---design-principles",level:2},{value:"Task 4 - Refactoring",id:"task-4---refactoring",level:2},{value:"Task 5 - Git &amp; Github",id:"task-5---git--github",level:2}],m={toc:p};function d(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"You are expected to work individually."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Due: Wednesday September 15th at 11pm EST (Baltimore time).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"This assignment is worth 50 points.")))),(0,i.kt)("h2",{id:"learning-objectives"},"Learning Objectives"),(0,i.kt)("admonition",{title:"Objectives",type:"success"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Identify classes, cohesion & coupling"),(0,i.kt)("li",{parentName:"ul"},"SOLID design principles"),(0,i.kt)("li",{parentName:"ul"},"Refactoring"),(0,i.kt)("li",{parentName:"ul"},"More Git & Github"))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Create a folder named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2")," in your private repo with five subfolders named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task3"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task4"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task5")," in it, and push onto the repo. As you work through the tasks, make periodic pushes to save your progress.")),(0,i.kt)("h2",{id:"task-1---software-design-and-uml"},"Task 1 - Software Design and UML"),(0,i.kt)("p",null,"Assume you are designing an object-oriented software for a ",(0,i.kt)("strong",{parentName:"p"},"parking lot")," system. We have the following requirements/assumptions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Each parking lot is comprised of a number of parking spots"),(0,i.kt)("li",{parentName:"ul"},"Each vehicle must park in one spot"),(0,i.kt)("li",{parentName:"ul"},"There are three kinds of parking spots: small, medium and large for three types of vehicles motorcycles, cars and buses, respectively.")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"What classes/interfaces will be in your initial design? Just name them.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"How are these classes/interfaces are related to each other. You must draw a UML class diagram and link it from within your (answer) document. ")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Defend your suggested design; that is justify why you went with the above design. What particular design principle(s) did you adhere to (or considered) in your proposed design."))),(0,i.kt)("admonition",{title:"UML Drawing",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"There are many (free) online tools that you can use to sketch a class diagram quickly, for instance: ",(0,i.kt)("a",{parentName:"p",href:"https://www.diagrams.net/"},"https://www.diagrams.net/"))),(0,i.kt)("admonition",{title:"Save Your Answers",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Save your answers to Task 1 questions in a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task1.md")," and place it in the folder named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task1")," inside ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2")," folder.")),(0,i.kt)("h2",{id:"task-2---design-principles"},"Task 2 - Design Principles"),(0,i.kt)("p",null,"Consider the following interface and classes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public interface Payment {\n    Object status();\n    void initiatePayments();\n    void intiateLoanSettlement();\n    void initiateRePayment();\n    // possibly more method declarations\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class LoanPayment implements Payment {\n    @Override\n    public void initiatePayments() {\n        throw new UnsupportedOperationException("Not a bank payment");\n    }\n    // implementation of the other LoanPayment methods including the \n    // ones declared in (and required by) the Payment interface\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class BankPayment implements Payment {\n    @Override\n    public void intiateLoanSettlement() {\n        throw new UnsupportedOperationException("Not a loan payment");\n    }\n \n    @Override\n    public void initiateRePayment() {\n        throw new UnsupportedOperationException("Not a loan payment");\n    }\n    // implementation of the other BankPayment methods including \n    // the ones declared in (and required by) the Payment interface\n}\n')),(0,i.kt)("p",null,"What specific design principle(s) has/have been compromised here? How would you modify this design so that it complies with the compromised design principle(s)? Explain in details."),(0,i.kt)("admonition",{title:"Save Your Answers",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Save your answers to Task 2 questions in a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task2.md")," and place it in the folder named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task2")," inside ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2")," folder.")),(0,i.kt)("h2",{id:"task-3---design-principles"},"Task 3 - Design Principles"),(0,i.kt)("p",null,"Assume, you have designed & implemented a chess game app for a client! In your design, you have a class named ",(0,i.kt)("inlineCode",{parentName:"p"},"Board")," that represents, well, a chess board! In your ",(0,i.kt)("inlineCode",{parentName:"p"},"Board")," class there are a bunch of class fields and methods along with a class field (which is a 2D array) to store the peices on the board and a method named ",(0,i.kt)("inlineCode",{parentName:"p"},"setLocation(int x, int y)")," to set the value of a particular location (to empty or a certain peice) on the board where ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," are the coordinates on the board. Now, the client comes back to you with some novel crazy idea of creating a 3D chess (with a whole new set of rules, etc.!)"),(0,i.kt)("p",null,"Naturally, you go back to the existing design you already have (to enhance it) to start the process of creating the 3D chess. One idea that comes to mind, to represent the new game board, is to introduce a new class named ",(0,i.kt)("inlineCode",{parentName:"p"},"Board3D")," that extends ",(0,i.kt)("inlineCode",{parentName:"p"},"Board"),". Is this a good idea or a bad idea? Defend your answer in the light of SOLID principles."),(0,i.kt)("admonition",{title:"Save Your Answers",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Save your answers to Task 1 questions in a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task3.md")," and place it in the folder named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task3")," inside ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2")," folder.")),(0,i.kt)("h2",{id:"task-4---refactoring"},"Task 4 - Refactoring"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Consider the following code to get the credit score of a user (i.e. person) from a credit agency as part of a loan-lender app. Can you identify and name a particular code smell (among the ones we have covered in class)? How would you go about fixing the code smell? Explain.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// ...\nCreditAgency cA;\n// code to properly initialize cA\nint score = cA.getCreditScore(personFirstName, personLastName, personSSN, personAdddress);\n// more code\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Identify and name a code smell in class ",(0,i.kt)("inlineCode",{parentName:"li"},"Person")," (among the ones we have covered in class)? How would you go about fixing it/them?\nNote: there might be more than one occurance of a particular code smell!\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"\npublic class Person { \n    String fullName;\n    String mailingAddress;\n    String email;\n\n    // method implementations \n} \n")),(0,i.kt)("admonition",{title:"Save Your Answers",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Save your answers to Task 4 questions in a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task4.md")," and place it in the folder named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task4")," inside ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2")," folder.")),(0,i.kt)("h2",{id:"task-5---git--github"},"Task 5 - Git & Github"),(0,i.kt)("p",null,"In this task, you will get practice with Git and GitHub. You are expected to be using a terminal for working with Git. You must follow the instruction below. Some of the instructions require you to run Git commands in the terminal. You must keep a log of the Git commands you use, in the order you use them, in the ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task5.md")," file."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make a folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task5"),". Open the terminal and change the working directory to ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task5")," folder.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Initialize a Git repository in this folder.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add a ",(0,i.kt)("inlineCode",{parentName:"p"},"README.md")," file and write ",(0,i.kt)("del",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"del"},"Local README"))," ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"README"))," in it and save it.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Add and commit changes with a descriptive commit message. (For all the following instructions, when you "commit", we expect that you enter a descriptive commit message.)')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Go on GitHub and make an empty repository. (Doesn't matter what you call it, and whether it is public or private.)")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Push your local repository to the remote (GitHub repository) that you've created.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the ",(0,i.kt)("inlineCode",{parentName:"p"},"README.md")," on GitHub and rewrite the ",(0,i.kt)("inlineCode",{parentName:"p"},"README.md")," to contain ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote README"),". Save (commit) the file on GitHub. ",(0,i.kt)("strong",{parentName:"p"},"Next, edit the local copy of ",(0,i.kt)("inlineCode",{parentName:"strong"},"README.md")," to contain ",(0,i.kt)("inlineCode",{parentName:"strong"},"Local README"),"."),"   "))),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(4278).Z,width:"1679",height:"194"})),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Notice the only difference between the README on GitHub and on your local computer is the words ",(0,i.kt)("inlineCode",{parentName:"p"},"Local")," vs. ",(0,i.kt)("inlineCode",{parentName:"p"},"Remote"),".")),(0,i.kt)("ol",{start:8},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Commit the changes on your local repository and try to push them to the remote repository. This should not work! Try to solve the problem. (As you solve the problem, more problems may arise, including a merge conflict! You should resolve the conflict, and eventually when all issues are resolved, both local and GitHub repository must contain the word ",(0,i.kt)("inlineCode",{parentName:"p"},"README"),")")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Assume your repository contains the code for your software. Moreover, assume we are going to add a new feature to your software using the ",(0,i.kt)("a",{parentName:"p",href:"https://guides.github.com/introduction/flow/"},"GitHub Flow"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Go to your repository on GitHub.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},'Create an issue with the title "Making feature 1!".')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a new branch on your local repository and call it ",(0,i.kt)("inlineCode",{parentName:"p"},"feature1"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Make a new file ",(0,i.kt)("inlineCode",{parentName:"p"},"FEATURE1.md")," in this new branch and write something in it!")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Commit changes and push to remote (GitHub) repository. You must get an error now. Try to solve it! (",(0,i.kt)("em",{parentName:"p"},"Hint: pay attention to the error message!"),")")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Once you've resolve the issue and committed the changes to the remote repository, go to GitHub and create a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"},"pull request")," to merge the ",(0,i.kt)("inlineCode",{parentName:"p"},"feature1")," branch to the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," branch.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Approve the pull request and merge the ",(0,i.kt)("inlineCode",{parentName:"p"},"feature1")," branch to the ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," branch.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"After the merge has been successful, close the issue related to adding the new feature.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Go on to your local repository and pull the latest changes from remote to your local ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," branch."))),(0,i.kt)("admonition",{title:"Save Your Answers",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Save your answers to Task 5 questions in a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task5.md")," and place it in the folder named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2-task5")," inside ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2")," folder.")),(0,i.kt)("admonition",{title:"Submission",type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Zip ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2")," folder in a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2.zip")," and submit the zip file to Gradescope under ",(0,i.kt)("inlineCode",{parentName:"p"},"Homework 2")," link. Also, you need to have the latest copy of your work within the ",(0,i.kt)("inlineCode",{parentName:"p"},"hw2")," folder saved in your personal repo (the repo with the name ",(0,i.kt)("inlineCode",{parentName:"p"},"cs421-f21-student-JHED")," where JHED is your unique JHED ID) within ",(0,i.kt)("inlineCode",{parentName:"p"},"jhu-oose")," organization. ")))}d.isMDXComponent=!0},4278:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/hw2-task5-76dc9c7d68fc1bf487306eb6dc6c091c.png"}}]);