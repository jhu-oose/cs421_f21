"use strict";(self.webpackChunkcs_421_source=self.webpackChunkcs_421_source||[]).push([[7811],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>u});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function s(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?s(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)o=s[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(o),u=a,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||s;return o?n.createElement(h,r(r({ref:t},p),{},{components:o})):n.createElement(h,r({ref:t},p))}));function u(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=o.length,r=new Array(s);r[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var c=2;c<s;c++)r[c]=o[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},5127:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=o(7462),a=(o(7294),o(3905));const s={id:"identify_classes",title:"Extract classes from problem description",sidebar_label:"Identify Classes"},r=void 0,i={unversionedId:"readings/wk2/identify_classes",id:"readings/wk2/identify_classes",title:"Extract classes from problem description",description:"Assume you have selected a few User Stories to implement for the next iteration. Now you need to extract classes from the problem description (User Stories).",source:"@site/docs/readings/wk2/identify_classes.md",sourceDirName:"readings/wk2",slug:"/readings/wk2/identify_classes",permalink:"/cs421/docs/readings/wk2/identify_classes",draft:!1,editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk2/identify_classes.md",tags:[],version:"current",frontMatter:{id:"identify_classes",title:"Extract classes from problem description",sidebar_label:"Identify Classes"},sidebar:"tutorialSidebar",previous:{title:"Good Enough Design",permalink:"/cs421/docs/readings/wk2/good_design"},next:{title:"Inheritance and Polymorphism",permalink:"/cs421/docs/readings/wk2/inheritance_poly"}},l={},c=[{value:"The verb/noun method",id:"the-verbnoun-method",level:2},{value:"The CRC Model",id:"the-crc-model",level:2},{value:"CRC Session",id:"crc-session",level:3}],p={toc:c};function d(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Assume you have selected a few User Stories to implement for the next iteration. Now you need to extract classes from the problem description (User Stories).\nWe will use a fairly simple method to address this task, which serves well for most software problems. It involves:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"using the verb/noun method to discover initial classes"),(0,a.kt)("li",{parentName:"ul"},"using CRC cards to discover responsibilities (behaviors) of each class and the collaboration (relationships) between them.")),(0,a.kt)("h2",{id:"the-verbnoun-method"},"The verb/noun method"),(0,a.kt)("p",null,"Read through a User Story, looking for ",(0,a.kt)("strong",{parentName:"p"},"nouns")," that represent ",(0,a.kt)("strong",{parentName:"p"},"objects")," in the problem domain. These nouns represent the simplest candidates to be classes. Moreover,\nactions that determine classes' behavior often reveal themselves as ",(0,a.kt)("strong",{parentName:"p"},"verbs")," in a User Story. "),(0,a.kt)("p",null,"For example, consider the following User Story (from ",(0,a.kt)("a",{parentName:"p",href:"../wk1/jbapp"},"JBApp"),") "),(0,a.kt)("admonition",{title:"User Story #1",type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("em",{parentName:"p"},"As a")," user, I want to view a complete list of all posted jobs ",(0,a.kt)("em",{parentName:"p"},"so that")," I can learn about existing vacancies.")),(0,a.kt)("p",null,'The nouns "User" and "Job" are candidate for a class. The verbs "view" (jobs) and "learn" (about vacancies) are candidates for methods i.e., behavior shared among (the nominal) classes. '),(0,a.kt)("p",null,"The verb/noun method is a gateway to your design but don't follow it religiously! Not all nouns nor all verbs correspond to classes/behaviors.\nYou might find later that you need a few additional classes or that some of the classes extracted at this stage are not needed. "),(0,a.kt)("admonition",{title:"Note",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Conventionally, the names of classes are singular rather than plural. This is because the multiplicity is achieved by creating multiple instances of a class.")),(0,a.kt)("h2",{id:"the-crc-model"},"The CRC Model"),(0,a.kt)("p",null,"A Class Responsibility Collaborator (CRC) model",(0,a.kt)("sup",{parentName:"p",id:"fnref-1"},(0,a.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," is a collection of ",(0,a.kt)("strong",{parentName:"p"},"standard index cards")," that have been divided into three sections, as depicted below. "),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(7420).Z,width:"2306",height:"1316"})),(0,a.kt)("p",null,"Here is an example of a CRC card for the aforementioned User Story."),(0,a.kt)("p",null,(0,a.kt)("img",{src:o(3415).Z,width:"2306",height:"1302"})),(0,a.kt)("p",null,"A responsibility is something that a class ",(0,a.kt)("strong",{parentName:"p"},"knows")," or ",(0,a.kt)("strong",{parentName:"p"},"does"),". Often a class has to ",(0,a.kt)("em",{parentName:"p"},"collaborate")," with other classes to fulfill a responsibility.\nCollaboration usually takes one of two forms: a request for information or a request to do something. "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"CRC model was originally used as a teaching technique but found its way to agile software development arsenal as an effective modeling tool.")),(0,a.kt)("h3",{id:"crc-session"},"CRC Session"),(0,a.kt)("p",null,"The goal of a CRC session is to discover classes and convert them to CRC cards. It is recommended to do this in a group setting to foster and facilitate brainstorming of good solutions. "),(0,a.kt)("p",null,"The session involves ",(0,a.kt)("em",{parentName:"p"},"iteratively")," performing the following steps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Extract classes."),(0,a.kt)("li",{parentName:"ul"},"Find responsibilities."),(0,a.kt)("li",{parentName:"ul"},"Define collaborators."),(0,a.kt)("li",{parentName:"ul"},"Role-play to refine responsibilities/collaborators!")),(0,a.kt)("admonition",{title:"CRC Role-play",type:"info"},(0,a.kt)("p",{parentName:"admonition"},'Each User Story describes a "scenario" for using the software. A common practice is to "execute a scenario" where each participant plays ',(0,a.kt)("em",{parentName:"p"},"the role of a class")," and the group collectively simulates the user story. ")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"A software requirement specification document (SRS) is the initial input to the process. The document should include User Stories. A project that cannot provide SRS is not ready to begin modeling."),(0,a.kt)("li",{parentName:"ul"},"Participants should have read and familiarized themselves with SRS that will be used in the session. "),(0,a.kt)("li",{parentName:"ul"},"A session should focus on a fairly small and manageable portion of the system at a time. Best is to focus on the subset of User Stories that will be implemented in the next iteration. "))),(0,a.kt)("p",null,"The outcome of a CRC session, like that of the verb/noun method, is not carved in stone. When you get to implement the model, new classes will be introduced, responsibilities will be reorganized, existing classes will disappear, and so on."),(0,a.kt)("div",{className:"footnotes"},(0,a.kt)("hr",{parentName:"div"}),(0,a.kt)("ol",{parentName:"div"},(0,a.kt)("li",{parentName:"ol",id:"fn-1"},'Beck K., Cunningham W., "A Laboratory For Teaching Object-Oriented Thinking", available at ',(0,a.kt)("a",{parentName:"li",href:"http://c2.com/doc/oopsla89/paper.html"},"http://c2.com/doc/oopsla89/paper.html")," (1989).",(0,a.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}d.isMDXComponent=!0},7420:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/crcCardLayout-5003a759c5f6486b36e2b09f91f00e5f.png"},3415:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/crcExample-8d05a5782b901dfb1ef8ec352c92dbf7.png"}}]);