"use strict";(self.webpackChunkcs_421_source=self.webpackChunkcs_421_source||[]).push([[4741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1237:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={id:"get",title:"Endpoint: HTTP Get",sidebar_label:"Endpoint: HTTP Get"},i=void 0,s={unversionedId:"readings/wk4/get",id:"readings/wk4/get",title:"Endpoint: HTTP Get",description:"Our first task is simple:",source:"@site/docs/readings/wk4/get.md",sourceDirName:"readings/wk4",slug:"/readings/wk4/get",permalink:"/cs421/docs/readings/wk4/get",draft:!1,editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk4/get.md",tags:[],version:"current",frontMatter:{id:"get",title:"Endpoint: HTTP Get",sidebar_label:"Endpoint: HTTP Get"},sidebar:"tutorialSidebar",previous:{title:"CRUD operations in data access Object (DAO)",permalink:"/cs421/docs/readings/wk4/dao"},next:{title:"The Java Database Connectivity (JDBC) API",permalink:"/cs421/docs/readings/wk4/jdbc"}},l={},p=[{value:"Get set up!",id:"get-set-up",level:2},{value:"HTTP content type and statuses",id:"http-content-type-and-statuses",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Our first task is simple:\nIf client access ",(0,r.kt)("inlineCode",{parentName:"p"},"SERVER_URL/employers"),", it will ",(0,r.kt)("inlineCode",{parentName:"p"},"Get")," a ",(0,r.kt)("strong",{parentName:"p"},"list of employers"),". Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"SERVER_URL")," for now is port ",(0,r.kt)("inlineCode",{parentName:"p"},"7000")," on ",(0,r.kt)("strong",{parentName:"p"},"localhost")," (",(0,r.kt)("a",{parentName:"p",href:"http://127.0.0.1:7000/"},(0,r.kt)("inlineCode",{parentName:"a"},"http://127.0.0.1:7000/")),") on your computer. "),(0,r.kt)("p",null,"Here is the code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public static void main(String[] args) throws SQLException {\n    final int PORT_NUM = 7000;\n    Spark.port(PORT_NUM);\n    get("/", (req, res) -> "Welcome to JBApp!");\n    get("/employers", (req, res) -> {\n        String results = new Gson().toJson(getORMLiteDao().queryForAll());\n        res.type("application/json");\n    return results;\n    });\n}\n')),(0,r.kt)("p",null,"Each of the above ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," function calls  defines an api endpoint and is called a ",(0,r.kt)("em",{parentName:"p"},"route"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},'We will use JSON to transfer data between server and client so "the list of employers" will be a JSON Array.')),(0,r.kt)("h2",{id:"get-set-up"},"Get set up!"),(0,r.kt)("p",null,"The following ",(0,r.kt)("em",{parentName:"p"},"selects")," and returns all the records (rows) of the ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"getORMLiteDao().queryForAll()\n")),(0,r.kt)("p",null,"Note the call to the helper method ",(0,r.kt)("inlineCode",{parentName:"p"},"getORMLiteDao()")," to get a new instance of Dao object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table."),(0,r.kt)("p",null,"Here is the implemetation of ",(0,r.kt)("inlineCode",{parentName:"p"},"getORMLiteDao()")," helper method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'private static Dao getORMLiteDao() throws SQLException {\n    final String URI = "jdbc:sqlite:./JBApp.db";\n    ConnectionSource connectionSource = new JdbcConnectionSource(URI);\n    return DaoManager.createDao(connectionSource, Employer.class);\n}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"In order for the above code to work, the ",(0,r.kt)("inlineCode",{parentName:"p"},"JBApp")," database should exist with a valid ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table in it (and ideally some rows in the table). For more info on how to create a databse and tables, and insert rows into them, refer to the previous readings under ",(0,r.kt)("a",{parentName:"p",href:"sql"},"Persistence with Databases")," section.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getORMLiteDao()")," returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"Dao")," object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table on which we can make various queries. In this case, we get the list of all emplyers from the ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table that pass into the ",(0,r.kt)("inlineCode",{parentName:"p"},"toJson")," method of ",(0,r.kt)("inlineCode",{parentName:"p"},"Gson")," to convert them into a JSON array of employers and store\nthem into a string. "),(0,r.kt)("admonition",{title:"JSON",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"JSON is an open standard file format and data interchange format that uses human-readable text to store and transmit data objects consisting of attribute\u2013value pairs and arrays. Watch ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=iiADhChRriM"},"this")," video for an intro to JSON!")),(0,r.kt)("admonition",{title:"Gson",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Gson is a Java library that can be used to convert Java Objects into their JSON representation. It can also be used to convert a JSON string to an equivalent Java object. Gson is an open-source project hosted at ",(0,r.kt)("a",{parentName:"p",href:"http://code.google.com/p/google-gson"},"http://code.google.com/p/google-gson"),". In order to use Gson in your Gradle project, add this dependency to ",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"implementation 'com.google.code.gson:gson:2.8.8'\n"))),(0,r.kt)("p",null,"Next, we need to set the content type of our ",(0,r.kt)("em",{parentName:"p"},"http response")," as well as the response ",(0,r.kt)("em",{parentName:"p"},"status"),". Since we are returning the data in JSON format, we set it accordingly, and we also set the status to ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," to indicate success:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'res.type("application/json");\nres.status(200);\n')),(0,r.kt)("p",null,"Eventually, we return the ",(0,r.kt)("inlineCode",{parentName:"p"},"results"),"."),(0,r.kt)("h2",{id:"http-content-type-and-statuses"},"HTTP content type and statuses"),(0,r.kt)("p",null,"You can see a full list of different MIME types ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types"},"here"),". Also, the following table shows different http status codes and their meaning:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Status"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"200 (OK)"),(0,r.kt)("td",{parentName:"tr",align:null},"This is the standard response for successful HTTP requests.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"201 (CREATED)"),(0,r.kt)("td",{parentName:"tr",align:null},"This is the standard response for an HTTP request that resulted in an item being successfully created.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"204 (NO CONTENT)"),(0,r.kt)("td",{parentName:"tr",align:null},"This is the standard response for successful HTTP requests, where nothing is being returned in the response body.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"400 (BAD REQUEST)"),(0,r.kt)("td",{parentName:"tr",align:null},"The request cannot be processed because of bad request syntax, excessive size, or another client error.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"403 (FORBIDDEN)"),(0,r.kt)("td",{parentName:"tr",align:null},"The client does not have permission to access this resource.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"404 (NOT FOUND)"),(0,r.kt)("td",{parentName:"tr",align:null},"The resource could not be found at this time. It is possible it was deleted, or does not exist yet.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"500 (INTERNAL SERVER ERROR)"),(0,r.kt)("td",{parentName:"tr",align:null},"The generic answer for an unexpected failure if there is no more specific information available.")))),(0,r.kt)("p",null,"If you run the application and point your browser to ",(0,r.kt)("a",{parentName:"p",href:"http://127.0.0.1:7000/employers"},(0,r.kt)("inlineCode",{parentName:"a"},"http://127.0.0.1:7000/employers")),", you must see a list of employers in JSON array format, something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain"},'[{"id":1,"name":"Nestle","sector":"Food/Drink","summary":""},{"id":2,"name":"Mitsubishi","sector":"Automative","summary":"Mitsubishi Corporation (MC) is a global integrated business enterprise that develops and operates businesses together with its offices and subsidiaries in approximately 90 countries and regions worldwide, as well as a global network of around 1,700 group companies."}]\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can use a browser extension like ",(0,r.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"},"JSON Formatter")," to ",(0,r.kt)("em",{parentName:"p"},"prettify")," the output into a more readable one.")))}c.isMDXComponent=!0}}]);