"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9456],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=m(t),u=r,y=d["".concat(l,".").concat(u)]||d[u]||c[u]||o;return t?a.createElement(y,i(i({ref:n},p),{},{components:t})):a.createElement(y,i({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1244:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return p},default:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],s={id:"lambda",title:"Lambda expressions",sidebar_label:"Lambda Expressions"},l=void 0,m={unversionedId:"readings/wk4/lambda",id:"readings/wk4/lambda",isDocsHomePage:!1,title:"Lambda expressions",description:"Setting the scene: anonymous classes!",source:"@site/docs/readings/wk4/lambda.md",sourceDirName:"readings/wk4",slug:"/readings/wk4/lambda",permalink:"/cs421_f21/docs/readings/wk4/lambda",editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk4/lambda.md",version:"current",frontMatter:{id:"lambda",title:"Lambda expressions",sidebar_label:"Lambda Expressions"},sidebar:"tutorialSidebar",previous:{title:"SparkJava",permalink:"/cs421_f21/docs/readings/wk4/sparkjava"},next:{title:"Endpoint: HTTP Get",permalink:"/cs421_f21/docs/readings/wk4/get"}},p=[{value:"Setting the scene: anonymous classes!",id:"setting-the-scene-anonymous-classes",children:[]},{value:"Lambda expression",id:"lambda-expression",children:[]}],c={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"setting-the-scene-anonymous-classes"},"Setting the scene: anonymous classes!"),(0,o.kt)("p",null,"Lambdas are anonymous functions. They were added to Java since Java 8 was released. Lambdas can be used in any place a Single Abstract Method was used before."),(0,o.kt)("p",null,"Let's showcase the use of Lambdas through a demo."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@SuppressWarnings("All")\npublic class LambdaDemo {\n\n  public static void main(String[] args) {\n\n  }\n\n  private static List<Employer> getSampleEmployers() {\n    List<Employer> employers = new ArrayList<>();\n    employers.add(new Employer("Boeing", "Aerospace", "The world\'s largest aerospace company!"));\n    employers.add(new Employer("Netflix", "Tech", "One of the world\'s leading entertainment services!"));\n    employers.add(new Employer("Target Inc.", "Retail", "A general merchandise retailer!"));\n    return employers;\n  }\n}\n')),(0,o.kt)("p",null,"We start with using anonymous inline classes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"private static void usingAnonymousInlineClass() {\n    List<Employer> emplyers = getSampleEmployers();\n    Collections.sort(employers, new Comparator<Employer>() {\n        @Override\n        public int compare(Employer e1, Employer e2) {\n            return e1.getName().compareTo(e2.getName());\n        }\n    });\n\n    for (Employer e: employers) {\n        System.out.println(e);\n    }\n}\n\n")),(0,o.kt)("p",null,"Call ",(0,o.kt)("inlineCode",{parentName:"p"},"usingAnonymousInlineClass")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," and it must print out the sample employers sorted by name."),(0,o.kt)("h2",{id:"lambda-expression"},"Lambda expression"),(0,o.kt)("p",null,"An interface that only has one unimplemented abstract method is called ",(0,o.kt)("em",{parentName:"p"},"functional interface")," in Java. In the example we saw above, ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparator")," is a functional interface as it only has one unimplemented asbstract method named ",(0,o.kt)("inlineCode",{parentName:"p"},"compare")," that any ",(0,o.kt)("em",{parentName:"p"},"implementing class")," must implement. We can use lambda expressions since Java 8 to implement a functional interface. In other words, we can just directly provide an implementation for the abstract method wherever a functional interface is expected. Alright, let's do the same thing we did above this time with a lambda function!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"private static void usingLambdaInLongForm() {\n    List<Employer> employers = getSampleEmployers();\n    Collections.sort(employers, (Employer e1, Employer e2) -> {\n        return e1.getName().compareTo(e2.getName());\n    });\n\n    for (Employer e: employers) {\n        System.out.println(e);\n    }\n}\n")),(0,o.kt)("p",null,"The following is ",(0,o.kt)("strong",{parentName:"p"},"syntax sugar")," for anonymous inline implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Comparator"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"(Employer e1, Employer e2) -> {\n    return e1.getName().compareTo(e2.getName());\n}\n")),(0,o.kt)("p",null,"You've used syntax sugar before: the ",(0,o.kt)("em",{parentName:"p"},"enhanced for loop")," is syntax sugar for looping through the use of an iterator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Iterator<Employer> it  = employers.iterator();\nwhile (it.hasNext()) {\n    Employer e = it.next();\n    System.out.println(e);\n}\n")),(0,o.kt)("p",null,"Bak to Lambdas, let's simplify our lambda expression:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"private static void usingLambdaInShortForm() {\n    List<Employer> employers = getSampleEmployers();\n    Collections.sort(employers, (e1, e2) -> e1.getName().compareTo(e2.getName()));\n\n    employers.forEach(employer -> System.out.println(employer));\n}\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"You don't need to specify the data type of arguments."),(0,o.kt)("li",{parentName:"ul"},"When the body of your lambda function is a single statement, you can eliminate the ",(0,o.kt)("inlineCode",{parentName:"li"},"{")," ",(0,o.kt)("inlineCode",{parentName:"li"},"}")," and the ",(0,o.kt)("inlineCode",{parentName:"li"},"return")," keyword.")))),(0,o.kt)("p",null,"Also note the use of ",(0,o.kt)("inlineCode",{parentName:"p"},"forEach")," method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"employers.forEach(employer -> System.out.println(employer));\n")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"References")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"},"Lambda Expression")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html"},"Functional Interface"))))))}d.isMDXComponent=!0}}]);