"use strict";(self.webpackChunkcs_421_source=self.webpackChunkcs_421_source||[]).push([[6376],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=o,c=u["".concat(p,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(c,r(r({ref:t},m),{},{components:n})):a.createElement(c,r({ref:t},m))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2645:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const i={id:"hw4",title:"Homework 4"},r=void 0,s={unversionedId:"hw/hw4",id:"hw/hw4",title:"Homework 4",description:"* You are expected to work on this homework as a team in your (project) group.",source:"@site/docs/hw/hw4.md",sourceDirName:"hw",slug:"/hw/hw4",permalink:"/cs421/docs/hw/hw4",draft:!1,editUrl:"https://jhu-oose.github.io/cs421_f21/docs/hw/hw4.md",tags:[],version:"current",frontMatter:{id:"hw4",title:"Homework 4"},sidebar:"tutorialSidebar",previous:{title:"Homework 3",permalink:"/cs421/docs/hw/hw3"},next:{title:"Homework 5",permalink:"/cs421/docs/hw/hw5"}},p={},l=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Task",id:"task",level:2}],m={toc:l};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"You are expected to work on this homework as a team in your (project) group."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Due: Wednesday September 29nd at 11pm EST (Baltimore time).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"This assignment is worth 50 points.")))),(0,o.kt)("h2",{id:"learning-objectives"},"Learning Objectives"),(0,o.kt)("admonition",{title:"Objectives",type:"success"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"Relational database management systems, SQL, DAO, ORM"),(0,o.kt)("li",{parentName:"ul"},"SQLite, JavaSpark, ORMLite, JUnit, OKHttp"),(0,o.kt)("li",{parentName:"ul"},"Basic web API development using SparkJava "))),(0,o.kt)("h2",{id:"task"},"Task"),(0,o.kt)("p",null,"Get the starter code for homework 4 from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/jhu-oose/JBApp/tree/main/hw4_starter"},(0,o.kt)("inlineCode",{parentName:"a"},"JBApp")," repo"),". Clone the repo since this is the first time you are copying the files. Inside ",(0,o.kt)("inlineCode",{parentName:"p"},"hw4_starter")," folder, you will find a Gradle Java project with the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-plain"},"JBApp/hw4_starter/src\n\u2514\u2500\u2500 /main/java\n|   \u2514\u2500\u2500 \n|       \u251c\u2500\u2500 model\n|       \u2502   \u2514\u2500\u2500 Employer.java\n|       |   \u2514\u2500\u2500 Job.java\n|       \u2514\u2500\u2500 Main.java\n\u251c\u2500\u2500 /test/java\n    \u251c\u2500\u2500 EmployerTest.java\n    \u2514\u2500\u2500 JobTest.java\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Model classes")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Employer.java")," & ",(0,o.kt)("inlineCode",{parentName:"p"},"Job.java"),": These two classes model ",(0,o.kt)("inlineCode",{parentName:"p"},"Employer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Job")," entities in our software. The class ",(0,o.kt)("inlineCode",{parentName:"p"},"Employer")," has a number of fields and methods and annotated using ",(0,o.kt)("a",{parentName:"p",href:"https://ormlite.com/"},"ORMLite")," annotations. ",(0,o.kt)("inlineCode",{parentName:"p"},"Job.Java")," also has a number of fields and methods in it, including a ",(0,o.kt)("del",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"del"},"employerId"))," ",(0,o.kt)("inlineCode",{parentName:"p"},"employer")," field which will be used to relate a specific instance of a job to a specific employer. Take time to study the two files and get yourself familiarized with them!")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Main.java")),": If you run ",(0,o.kt)("inlineCode",{parentName:"p"},"Main.java"),", it will start a local ",(0,o.kt)("a",{parentName:"p",href:"http://sparkjava.com/"},"SparkJava")," server on your machine on ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:7000"),". It also defines an API endpoint ",(0,o.kt)("inlineCode",{parentName:"p"},"/employers"),". If you start the server and visit ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:7000/employers")," on your browser, it will show a list of employers to you in JSON format (assuming you have employer records saved in the ",(0,o.kt)("inlineCode",{parentName:"p"},"employers")," table within JBApp database). Take time to study ",(0,o.kt)("inlineCode",{parentName:"p"},"Main.java")," and develop an understanding of it.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"EmployerTest.java")),": This is a JUnit test class. There are two inner classes (i.e. nested classes) inside ",(0,o.kt)("inlineCode",{parentName:"p"},"EmployerTest"),": "),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"EmployerORMLiteDaoTest"),": there are already five unit tests written for you in this class to give you an idea how to write test cases in JUnit, and how to make use of ",(0,o.kt)("inlineCode",{parentName:"p"},"dao")," object to do various CRUD operations on a table (",(0,o.kt)("inlineCode",{parentName:"p"},"employers")," table in this case.) These test methods run and assert different CRUD operations on the ",(0,o.kt)("inlineCode",{parentName:"p"},"employers")," table. "),(0,o.kt)("admonition",{parentName:"li",title:"TODO #1",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Read the comments and add more test cases inside ",(0,o.kt)("inlineCode",{parentName:"p"},"EmployerORMLiteDaoTest")," for the listed scenarios. Note for each listed scenario you need to write a test case in a separate test method and make use of JUnit assert methods appropriately. If you want to do something and you are not sure how to do it and cannot find your answer in the given test cases, consult ",(0,o.kt)("a",{parentName:"p",href:"https://junit.org/junit5/docs/current/user-guide/#writing-tests"},"JUnit 5 user guide"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"EmployerAPITest"),": This is the second inner class inside ",(0,o.kt)("inlineCode",{parentName:"p"},"EmployerTest")," class that will contain our test cases that test the ",(0,o.kt)("inlineCode",{parentName:"p"},"/employers")," API endpoint of our JBApp. For now, there is only one test method here named ",(0,o.kt)("inlineCode",{parentName:"p"},"testHTTPGetEmployersEndpoint()")," that is empty."),(0,o.kt)("admonition",{parentName:"li",title:"TODO #2",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Read the comments and complete the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"testHTTPGetEmployersEndpoint()"),". At minimum, you need to verify the return status code of the http get request you send using ",(0,o.kt)("inlineCode",{parentName:"p"},"OkHttp"),". Ideally though, you want to make sure the received response in JSON format indeed is correct and contains the expected content, but it is not a requirement for this homework!"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Now, go back to ",(0,o.kt)("inlineCode",{parentName:"p"},"Job.java")," and annotate the ",(0,o.kt)("inlineCode",{parentName:"p"},"Job")," class using ORMLite annotations similar to the way ",(0,o.kt)("inlineCode",{parentName:"p"},"Employer")," class is annotated. But you need to annotate it such that you will then be able to create ",(0,o.kt)("inlineCode",{parentName:"p"},"jobs")," table using ",(0,o.kt)("inlineCode",{parentName:"p"},"TableUtils"),", the very same way we create ",(0,o.kt)("inlineCode",{parentName:"p"},"Employer")," table in the ",(0,o.kt)("inlineCode",{parentName:"p"},"getEmployerORMLiteDao()")," method of ",(0,o.kt)("inlineCode",{parentName:"p"},"Main.java")),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"In particular, you need to make sure the foreign key constraint gets created on the ",(0,o.kt)("inlineCode",{parentName:"p"},"employer")," field that references a particular employer in the ",(0,o.kt)("inlineCode",{parentName:"p"},"employers")," table. You might want to check out the reading assignment on ",(0,o.kt)("a",{parentName:"p",href:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk4/jobs_employer_connect"},"Connecting ",(0,o.kt)("inlineCode",{parentName:"a"},"Job")," and ",(0,o.kt)("inlineCode",{parentName:"a"},"Employer")," classes")," and/or consult ",(0,o.kt)("a",{parentName:"p",href:"https://ormlite.com/javadoc/ormlite-core/doc-files/ormlite.html"},"ORMLite documentation and its various annotations"),"!")),(0,o.kt)("admonition",{parentName:"li",title:"TODO #3",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Complete annotating the ",(0,o.kt)("inlineCode",{parentName:"p"},"Job")," class using ORM annotations!"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Head back to ",(0,o.kt)("inlineCode",{parentName:"p"},"Main.java")," to add a ",(0,o.kt)("inlineCode",{parentName:"p"},"/jobs")," endpoint (similar to what we have done in ",(0,o.kt)("inlineCode",{parentName:"p"},"employers")," endpoint). When a http get request is sent to this API endpoint, it must return the list of all jobs stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"jobs")," table in ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," format and set the status code to 200."),(0,o.kt)("admonition",{parentName:"li",title:"TODO #4",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Complete implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"/jobs")," API endpoint in ",(0,o.kt)("inlineCode",{parentName:"p"},"Main.java")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, move over to ",(0,o.kt)("inlineCode",{parentName:"p"},"JobTest.java"),". It is structured similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"EmployerTest.java"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"JobTest.java")," is a JUnit test class with two inner classes (i.e. nested classes):"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"EmployerORMLiteDaoTest"),": You need to write at least 12 different test cases (i.e., test methods) that would test C(reate)/U(pdate)/D(elete) operations on the ",(0,o.kt)("inlineCode",{parentName:"p"},"jobs")," tables using a ORMLite DAO. You need to write at least 4 test cases for each of the CUD operations. Agian, what we are trying to do here is very similar to what is already done in ",(0,o.kt)("inlineCode",{parentName:"p"},"EmployerTest")," and specifically ",(0,o.kt)("inlineCode",{parentName:"p"},"EmployerORMLiteDaoTest"),". So, if you are not sure how/where to start, go back and study ",(0,o.kt)("inlineCode",{parentName:"p"},"EmployerORMLiteDaoTest")," to get some inspirations! "),(0,o.kt)("admonition",{parentName:"li",title:"TODO #5",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Read the comments and implement test cases inside ",(0,o.kt)("inlineCode",{parentName:"p"},"JobORMLiteDaoTest"),". Note for each test case you write you need to define a separate test method and make use of JUnit assert methods. If you want to do something and you are not sure how to do it, consult ",(0,o.kt)("a",{parentName:"p",href:"https://junit.org/junit5/docs/current/user-guide/#writing-tests"},"JUnit 5 user guide"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"JobAPITest"),": This is the second inner class inside ",(0,o.kt)("inlineCode",{parentName:"p"},"JobTest")," class that will contain our test cases that test the ",(0,o.kt)("inlineCode",{parentName:"p"},"/jobs")," API endpoint of our JBApp. For now. there is only one test method here named ",(0,o.kt)("inlineCode",{parentName:"p"},"testHTTPGetJobsEndpoint()")," that is empty."),(0,o.kt)("admonition",{parentName:"li",title:"TODO #6",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Read the comments and finish the implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"testHTTPGetJobsEndpoint()"),". At minimum, you need to verify the return status code of the http get request you send using ",(0,o.kt)("inlineCode",{parentName:"p"},"OkHttp"),". Ideally though, you want to make sure the received response in JSON format indeed is correct and contains the expected content, but it is not a requirement for this homework!")))))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"To complete this homework, you will need to work with different libraries and tools. If you intend to do something and are not sure how to proceed, refer to the website/documentation/user guide/manual of that tool/library. Remember our note on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3001/cs421_f21/docs/readings/wk1/audience"},"Self-Efficacy & Self-Directed Learning"),". Researching/finding things on your own and getting into the habit of reading&learning about different tools/technologies/libraries on your own are invaluable assets found in the arsenal of any (decent) software engineer! Having said that, for this homework, you may particularly find the following resources useful:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://junit.org/junit5/docs/current/user-guide/#writing-tests"},"JUnit 5 User Guide")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://ormlite.com/javadoc/ormlite-core/doc-files/ormlite.html"},"ORMLite Documentation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://square.github.io/okhttp/"},"OKHtpp Documentation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://sparkjava.com/documentation"},"SparkJava Documentation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.sqlite.org/docs.html"},"SQLite Documentation")))),(0,o.kt)("admonition",{title:"Teamwork",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You may use the group project repo we have provided you with, in the ",(0,o.kt)("inlineCode",{parentName:"p"},"jhu-oose")," Github organzition, for this and future homework assignments, but feel free to create and share a separate repo among yourselves and do your homework assignments in there. Either way, we expect you would make good use of git/Github to facilitate team collaboration on these team-based homework assignment, but will not track it. Finally, ",(0,o.kt)("strong",{parentName:"p"},"each member must contribute her/his fair share to completing these assignments. Be proactive and assign yourslef to tasks!"))),(0,o.kt)("admonition",{title:"submission",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Once you have finished all the 6 TODOs, zip your Gradle Project in a single zip file named ",(0,o.kt)("inlineCode",{parentName:"p"},"hw4.zip"),". ",(0,o.kt)("strong",{parentName:"p"},"Please make sure NOT to include ",(0,o.kt)("inlineCode",{parentName:"strong"},".idea"),", ",(0,o.kt)("inlineCode",{parentName:"strong"},"build"),", ",(0,o.kt)("inlineCode",{parentName:"strong"},"_MACOSX"),", ",(0,o.kt)("inlineCode",{parentName:"strong"},".DS_Store")," files/folders in your zip file.")," Submit ",(0,o.kt)("inlineCode",{parentName:"p"},"hw4.zip")," to Homework 4 link on Gradescope. Each group needs to make one submission only, so one person from the group makes the submission on behalf of everyone in the group. ",(0,o.kt)("em",{parentName:"p"},"We only require one submission from each group on Gradescope as a single zip file named ",(0,o.kt)("inlineCode",{parentName:"em"},"hw4.zip")))))}d.isMDXComponent=!0}}]);