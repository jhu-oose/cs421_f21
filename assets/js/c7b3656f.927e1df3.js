"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6698],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),u=i,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3710:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],l={id:"orm",title:"Object Relational Mapping (ORM)",sidebar_label:"Object Relational Mapping"},s=void 0,p={unversionedId:"readings/wk4/orm",id:"readings/wk4/orm",isDocsHomePage:!1,title:"Object Relational Mapping (ORM)",description:"Object-relational mapping (ORM) is an application (library) to map your objects to a relational database; typically, you describe which classes and properties in the code map to which tables and columns in the database, and then the library does all the copying and translating. In this scenario, ORM sits between JDBC and the rest of your Java application.",source:"@site/docs/readings/wk4/orm.md",sourceDirName:"readings/wk4",slug:"/readings/wk4/orm",permalink:"/cs421_f21/docs/readings/wk4/orm",editUrl:"https://jhu-oose.github.io/cs421_f21/docs/readings/wk4/orm.md",version:"current",frontMatter:{id:"orm",title:"Object Relational Mapping (ORM)",sidebar_label:"Object Relational Mapping"},sidebar:"tutorialSidebar",previous:{title:"CRUD operations in data access Object (DAO)",permalink:"/cs421_f21/docs/readings/wk4/dao"},next:{title:"Separation of Client and Server",permalink:"/cs421_f21/docs/readings/wk4/api"}},c=[{value:"ORMLite",id:"ormlite",children:[]},{value:"ORMLite Annotations",id:"ormlite-annotations",children:[]},{value:"Basic Database Operations",id:"basic-database-operations",children:[{value:"Create &amp; READ",id:"create--read",children:[]}]}],m={toc:c};function d(e){var t=e.components,l=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Object-relational mapping (ORM) is an application (library) to map your objects to a relational database; typically, you describe which classes and properties in the code map to which tables and columns in the database, and then the library does all the copying and translating. In this scenario, ORM sits between JDBC and the rest of your Java application."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(2070).Z})),(0,r.kt)("h2",{id:"ormlite"},"ORMLite"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ormlite.com/"},"ORMLite")," is a small java library, with the purpose of making database interaction easy. ORMLite provides lightweight functionality for persisting Java objects to SQL databases. To use it, you must add it as a dependency to your project. Open ",(0,r.kt)("inlineCode",{parentName:"p"},"gradle.build")," and add the following line to the ",(0,r.kt)("inlineCode",{parentName:"p"},"dependencies")," block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"implementation 'com.j256.ormlite:ormlite-jdbc:5.6'\n")),(0,r.kt)("h2",{id:"ormlite-annotations"},"ORMLite Annotations"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Annotations are special code markers have have been available in Java since version 5 that provide meta information about classes, methods, or fields"))),(0,r.kt)("p",null,"First step is to ",(0,r.kt)("em",{parentName:"p"},"annotate")," the POJO model classes that you want to be persisted in the database. Let's annotate the ",(0,r.kt)("inlineCode",{parentName:"p"},"Employer")," class with ORMLite annotations as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package model;\n\nimport com.j256.ormlite.field.DatabaseField;\nimport com.j256.ormlite.table.DatabaseTable;\n\n@DatabaseTable(tableName = "employers")\npublic class Employer {\n    @DatabaseField(id = true)\n    private Integer id;\n    @DatabaseField(canBeNull = true, unique = true)\n    private String name;\n    @DatabaseField\n    private String sector;\n    @DatabaseField\n    private String summary;\n\n    public Employer() {\n    }\n\n    public Employer(String name, String sector, String summary) {\n        this.name = name;\n        this.sector = sector;\n        this.summary = summary;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getSector() {\n        return sector;\n    }\n\n    public String getSummary() {\n        return summary;\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'@DatabaseTable(tableName = "employers")')," specifies that objects of ",(0,r.kt)("inlineCode",{parentName:"p"},"Employer")," class are going to be mapped/saved to a table named ",(0,r.kt)("inlineCode",{parentName:"p"},"employers"),". Each class field that we want corresponded/saved as a column in the target table needs to be annotated using ",(0,r.kt)("inlineCode",{parentName:"p"},"@DatabaseField"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," argument passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DatabaseField")," annotation marks a particular class field as the id (i.e. primary key) of the table. In our case, class field named ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is the primary key in the ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table. ",(0,r.kt)("inlineCode",{parentName:"p"},"canBeNull")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"unique")," arguments are self-explanatory!"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In order for ORMLite to return the results of your queries properly make sure to always include an explicit default constructor in your class."))),(0,r.kt)("h2",{id:"basic-database-operations"},"Basic Database Operations"),(0,r.kt)("p",null,"Once you have your model class(es) properly annotated, you can delegate many of the basic database tasks (i.e., CRUD tasks) to ORMLite without writing any SQLs really! That is pretty cool, isn't it? "),(0,r.kt)("h3",{id:"create--read"},"Create & READ"),(0,r.kt)("p",null,"Remember we did the following to create ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'final String URI = "jdbc:sqlite:./JBApp.db";\nConnection conn = DriverManager.getConnection(URI);\nStatement st = conn.createStatement();\nStatement st = conn.createStatement();\nString sql = "CREATE TABLE IF NOT EXISTS employers (id INTEGER PRIMARY KEY, \n       name VARCHAR(100) NOT NULL UNIQUE, sector VARCHAR(100), summary VARCHAR(10000));";\nst.execute(sql);\nsql = "INSERT INTO employers(id, name, sector, summary)" +\n                "VALUES (NULL, \'Nestle\', \'Food/Drink\', \'\');";\nst.execute(sql);\n')),(0,r.kt)("p",null,"But, having ",(0,r.kt)("inlineCode",{parentName:"p"},"Employer")," class ORMLite-annotated, you can achieve the same by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'final String URI = "jdbc:sqlite:./JBApp.db";\nConnectionSource connectionSource = new JdbcConnectionSource(URI);\nDao<Employer,Integer> employerDao = DaoManager.createDao(connectionSource, Employer.class);\nTableUtils.createTableIfNotExists(connectionSource, Employer.class);\nEmployer em = new Employer ("Nestle2", "Food/Drink", "");\nemployerDao.create(em);\n')),(0,r.kt)("p",null,"First we create a database connection by passing the connection URI into ",(0,r.kt)("inlineCode",{parentName:"p"},"JdbcConnectionSource"),". Next, we need to create a DAO object. For this, you need to provide the connection instance (i.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"connectionSource"),") as well as the (model) class that corresponds to the DAO we are creating to the ",(0,r.kt)("inlineCode",{parentName:"p"},"createDao")," method of ",(0,r.kt)("inlineCode",{parentName:"p"},"DaoManager"),". This creates a ",(0,r.kt)("inlineCode",{parentName:"p"},"Dao<Employer, Integer>")," object for class ",(0,r.kt)("inlineCode",{parentName:"p"},"Employer")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"Integer")," must corresponds to the datatype of the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," field in the persisted class (i.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"Employer")," class). Using ",(0,r.kt)("inlineCode",{parentName:"p"},"TableUtils.createTableIfNotExists")," we create the ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table if it does not exist already! Next, ",(0,r.kt)("inlineCode",{parentName:"p"},"employerDao.create(em);")," results in execution of the following query on the ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO employers (id, name, sector, summary) VALUES (NULL, 'Nestle', 'Food/Drink', '');\n")),(0,r.kt)("p",null,"Now, using the same ",(0,r.kt)("inlineCode",{parentName:"p"},"employerDao")," object we already created, we can read all the records in the ",(0,r.kt)("inlineCode",{parentName:"p"},"employers")," table (and print their names) as follows: i.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT * FROM employer")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"employerDao.create(em);\nList<Employer> ls  = employerDao.queryForAll();\n\nfor (Employer e: ls) {\n    System.out.println(e.getName());\n}\n")),(0,r.kt)("p",null,"There are other methods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"queryForEq()")," which you can call to read only select records. The following is equivalent of ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT * FROM employers WHERE name='Nestle'"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'employerDao.queryForEq("name", "Nestle");\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"More Operations")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"ORMLite provides various classes and functionalities to do all sorts of database operations with minimal effort. Consult ",(0,r.kt)("a",{parentName:"p",href:"https://ormlite.com/javadoc/ormlite-core/doc-files/ormlite.html"},"this page")," for further information."))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"There are specific annotations to specify and work with foreign keys. These would be useful when setting up the ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs")," table in the context of ",(0,r.kt)("inlineCode",{parentName:"p"},"JBApp"),". I trust you can find out those on your own by consulting the documentation page of ORMLite!"))))}d.isMDXComponent=!0},2070:function(e,t,a){t.Z=a.p+"assets/images/orm-805241df4b0cc0db31f8cd5595f69e75.png"}}]);